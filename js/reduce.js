/**
 *
 * ---------------------------------------------------------------------
 * –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤.
–ü–æ–µ–ª–µ–º–µ–Ω—Ç–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤.
–ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å–µ, —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ.
–†–æ–±–∏—Ç—å –≤—Å–µ, —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ.
*----------------------------------------------------------------------
*
 */

/**
 * –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –±—É–¥—å —è–∫–∏–π —Ä—è–¥–æ–∫ –ª—ñ—Ç–µ—Ä,
 * –∞ –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç –∑ –ª—ñ—Ç–µ—Ä–∞–º–∏ —ñ —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≤ —Ä—è–¥–∫—É, —è–∫ "–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–Ω—è"
 * @param  string
 * @returns object with amounts letters
 */

const strSortByLetter = (string) => {
  return string.split("").reduce((acc, letter) => {
    letter in acc ? (acc[letter] += 1) : (acc[letter] = 1);

    return acc;
  }, {});
};

// console.log(strSortByLetter("adndjkhhlkkosjspskkeijfh"));
// console.log(strSortByLetter("SDOIUYRFDSCVCGhjgff"));

const logCar = (array) => {
  return array.reduce(
    (acc, item, idx) => {
      return acc + `${idx + 1} - ${item} \n`;
    },
    array.length ? `–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ: ${array.length} \n` : "–í–∏–±–∞—á—Ç–µ, –∞–≤—Ç–æ –Ω–µ–º–∞—î ü§∑‚Äç‚ôÄÔ∏è"
  );
};

// console.log(logCar(["VW", "Renoult", "Kia", "Cherry", "Subary", "Opel", "Toyota"]));
// console.log(logCar([]));

/**
 *
 */
const users = [
  {
    name: "Moore Hensley",
    email: "moorehensley@indexia.com",
    eyeColor: "blue",
    friends: ["Sharron Pace"],
    isActive: false,
    balance: 2811,
    gender: "male",
    age: 37,
  },
  {
    name: "Sharlene Bush",
    email: "sharlenebush@tubesys.com",
    eyeColor: "blue",
    friends: ["Briana Decker", "Linda Chapman", "Sharron Pace"],
    isActive: true,
    balance: 3821,
    gender: "female",
    age: 34,
  },
  {
    name: "Ross Vazquez",
    email: "rossvazquez@xinware.com",
    eyeColor: "green",
    friends: ["Marilyn Mcintosh", "Padilla Garrison", "Naomi Buckner"],
    isActive: false,
    balance: 3793,
    gender: "male",
    age: 24,
  },
  {
    name: "Elma Head",
    email: "elmahead@omatom.com",
    eyeColor: "green",
    friends: ["Goldie Gentry", "Aisha Tran", "Linda Chapman"],
    isActive: true,
    balance: 2278,
    gender: "female",
    age: 21,
  },
  {
    name: "Carey Barr",
    email: "careybarr@nurali.com",
    eyeColor: "blue",
    friends: ["Jordan Sampson", "Eddie Strong"],
    isActive: true,
    balance: 3951,
    gender: "male",
    age: 27,
  },
  {
    name: "Blackburn Dotson",
    email: "blackburndotson@furnigeer.com",
    eyeColor: "brown",
    friends: ["Jacklyn Lucas", "Linda Chapman"],
    isActive: false,
    balance: 1498,
    gender: "male",
    age: 38,
  },
  {
    name: "Sheree Anthony",
    email: "shereeanthony@kog.com",
    eyeColor: "brown",
    friends: ["Goldie Gentry", "Briana Decker"],
    isActive: true,
    balance: 2764,
    gender: "female",
    age: 39,
  },
];

/**
 * Rest all friends
 * function rests all friends into the one array
 * @param {*} users
 * @returns [allFriends]
 */

const getAllFriends = (users) => {
  return users.reduce((acc, user) => {
    // acc.push(...user.friends); –º—É—Ç—É—î –∑–º—ñ–Ω–Ω—É ??? –ª—ñ–Ω—Ç–µ—Ä –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    // console.log(acc);
    return [...acc, ...user.friends]; //–Ω–µ –º—É—Ç—É—î
  }, []);
};

// console.log(getAllFriends(users));

/**
 * Friend statistics
 * function rest all friends into the object and puts as {key: amount}
 * @param [] friends
 * @returns {friend: amount}
 */

const countFriends = (friends) => {
  return friends.reduce((acc, friend) => {
    // acc.hasOwnProperty(friend) ? (acc[friend] += 1) : (acc[friend] = 1); //–º—É—Ç—É—î acc

    return {
      ...acc,
      [friend]: acc.hasOwnProperty(friend) ? acc[friend] + 1 : 1, // –Ω–µ –º—É—Ç—É—î acc
    };
  }, {});
};

// console.log(countFriends(getAllFriends(users)));

/**
 * –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å



–ù–∞–ø–∏—à–∏ —Å—Ç—Ä—ñ–ª–æ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é getTotalBalanceByGender(users, gender),
 —è–∫–∞ –ø—Ä–∏–π–º–∞—Ç–∏–º–µ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:

–ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä users ‚Äî –º–∞—Å–∏–≤ –æ–±‚Äô—î–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤,
–¥—Ä—É–≥–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä gender ‚Äî —Ä—è–¥–æ–∫, —â–æ –∑–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞—Ç—å.

–§—É–Ω–∫—Ü—ñ—è –º–∞—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∞–Ω—Ü—é–∂–æ–∫ –≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥—ñ–≤ —Ç–∞
–ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å balance),
—Å—Ç–∞—Ç—å —è–∫–∏—Ö (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å gender) –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ gender.
 */

const getTotalBalanceByGender = (users, gender) => {
  return users.filter((user) => user.gender === gender).reduce((total, user) => (total += user.balance), 0);
};

const clients = [
  {
    name: "Moore Hensley",
    gender: "male",
    balance: 2811,
  },
  {
    name: "Sharlene Bush",
    gender: "female",
    balance: 3821,
  },
  {
    name: "Ross Vazquez",
    gender: "male",
    balance: 3793,
  },
  {
    name: "Elma Head",
    gender: "female",
    balance: 2278,
  },
  {
    name: "Carey Barr",
    gender: "male",
    balance: 3951,
  },
  {
    name: "Blackburn Dotson",
    gender: "male",
    balance: 1498,
  },
  {
    name: "Sheree Anthony",
    gender: "female",
    balance: 2764,
  },
];

// console.log(getTotalBalanceByGender(clients, "male")); // 12053

// console.log(getTotalBalanceByGender(clients, "female")); // 8863

//
//
//
/**
 *
 *Given an array of integers, find the one that appears an odd number of times.
There will always be only one integer that appears an odd number of times.

Examples
[7] should return 7, because it occurs 1 time (which is odd).
[0] should return 0, because it occurs 1 time (which is odd).
[1,1,2] should return 2, because it occurs 1 time (which is odd).
[0,1,0,1,0] should return 0, because it occurs 3 times (which is odd).
 */
//
//

// function findOdd(numbers) {
//   return numbers.reduce((a, b) => a ^ b);
// }

function findOdd(numbers) {
  const objNum = numbers.reduce((acc, num) => {
    if (num in acc) {
      acc[num] += 1;
    } else {
      acc[num] = 1;
    }

    return acc;
  }, {});

  for (const num in objNum) {
    if (objNum[num] % 2 !== 0) {
      return Number(num); //–∫–æ–Ω–≤–µ—Ä—Ç—É—î–º –≤ —á–∏—Å–ª–æ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º –π–æ–≥–æ
    }
  }
}

// console.log(findOdd([1, 5, 5])); //1
// console.log(findOdd([3, 3, 2])); //2
// console.log(findOdd([7])); //7
// console.log(findOdd([20, 1, -1, 2, -2, 3, 3, 5, 5, 1, 2, 4, 20, 4, -1, -2, 5])); //5
